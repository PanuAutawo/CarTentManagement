import React, { useState } from "react";
import axios from "axios";
import "./customer-payment.css";

interface PaymentMethodFormProps {
  payment: any;
  onClose: () => void;
}

const PaymentMethodForm: React.FC<PaymentMethodFormProps> = ({ payment, onClose }) => {
  const [method, setMethod] = useState("‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£");
  const [file, setFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    if (!file) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô");
      return;
    }
    const formData = new FormData();
    formData.append("method", method);
    formData.append("file", file);
    try {
      setLoading(true);
      await axios.post(
        `http://localhost:8080/api/payments/${payment.id}/proof`,
        formData,
        { headers: { "Content-Type": "multipart/form-data" } }
      );
      alert("üì§ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      onClose();
    } catch (error) {
      console.error("Upload failed", error);
      alert("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal">
        <h3>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô {payment.amount} ‡∏ö‡∏≤‡∏ó</h3>

        <label>
          ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞:
          <select value={method} onChange={(e) => setMethod(e.target.value)}>
            <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£">‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</option>
            <option value="‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå</option>
          </select>
        </label>

        {method === "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" && (
          <div className="payment-info">
            <p><strong>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> 123-456-7890</p>
            <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó CarTent Management ‡∏à‡∏≥‡∏Å‡∏±‡∏î</p>
          </div>
        )}

        {method === "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå" && (
          <div className="payment-info">
            <p>‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ó‡∏î‡∏™‡∏≠‡∏ö)</p>
            <img
              src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=MockPromptPay1234567890"
              alt="QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå"
              className="qr-code"
            />
          </div>
        )}

        <label>
          ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô:
          <input type="file" onChange={(e) => setFile(e.target.files?.[0] || null)} />
        </label>

        <div className="modal-actions">
          <button className="btn-primary" onClick={handleSubmit} disabled={loading}>
            {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á..." : "‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô"}
          </button>
          <button className="btn-secondary" onClick={onClose}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
        </div>
      </div>
    </div>
  );
};

export default PaymentMethodForm;
